package two_sum;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Solution {
    public static int[] twoSum(int[] nums, int target) {
        // for each num less than target, check other nums, until sum == target
    	Map<Integer, Integer> numMap = new HashMap<>();
    	Map<Integer, Integer> numMap2 = new HashMap<>();
    	int index = 0;
    	for (int i:nums) {
    		if (-1 == numMap.getOrDefault(i, -1))
    			numMap.put(i, index+1);
    		else
    			numMap2.put(i, index+1);
    		index++;
    	}
    	int[] successPair = {-1,-1};
    	for (Map.Entry<Integer, Integer> entry : numMap.entrySet()) {
    		Integer num = entry.getKey();
    		int other = target - num;
    		if ((other != num) && (-1 != numMap.getOrDefault(other, -1))) {
    			successPair[0] = numMap.get(num);
    			successPair[1] = numMap.get(other);    			
    		}
    		if ((other == num) && (-1 != numMap2.getOrDefault(other, -1))) {
    			successPair[0] = numMap.get(num);
    			successPair[1] = numMap2.get(num);    			
    		}
    	}
    	Arrays.sort(successPair);
    	return successPair;
    }
    public static void main(String[] args){
    	int[] ar = {3,2,4};
    	System.out.println( Arrays.toString(twoSum (ar, 6)));
    	ar = new int[]{5,75,25};
    	System.out.println( Arrays.toString(twoSum(ar, 100)));
    	System.out.println( Arrays.toString(twoSum( new int[] {0,4,3,0}, 0)));
    	System.out.println( Arrays.toString(twoSum( new int[] {572,815,387,418,434,530,376,190,196,74,830,561,973,771,640,37,539,369,327,51,623,575,988,44,659,48,22,776,487,873,486,169,499,82,128,31,386,691,553,848,968,874,692,404,463,285,745,631,304,271,40,921,733,56,883,517,99,580,55,81,232,971,561,683,806,994,823,219,315,564,997,976,158,208,851,206,101,989,542,985,940,116,153,47,806,944,337,903,712,138,236,777,630,912,22,140,525,270,997,763,812,597,806,423,869,926,344,494,858,519,389,627,517,964,74,432,730,843,673,985,819,397,607,34,948,648,43,212,950,235,995,76,439,614,203,313,180,760,210,813,920,229,615,730,359,863,678,43,293,978,305,106,797,769,3,700,945,135,430,965,762,479,152,121,935,809,101,271,428,608,8,983,758,662,755,190,632,792,789,174,869,622,885,626,310,128,233,82,223,339,771,741,227,131,85,51,361,343,641,568,922,145,256,177,329,959,991,293,850,858,76,291,134,254,956,971,718,391,336,899,206,642,254,851,274,239,538,418,21,232,706,275,615,568,714,234,567,994,368,54,744,498,380,594,415,286,260,582,522,795,261,437,292,887,405,293,946,678,686,682,501,238,245,380,218,591,722,519,770,359,340,215,151,368,356,795,91,250,413,970,37,941,356,648,594,513,484,364,484,909,292,501,59,982,686,827,461,60,557,178,952,218,634,785,251,290,156,300,711,322,570,820,191,755,429,950,18,917,905,905,126,790,638,94,857,235,889,611,605,203,859,749,874,530,727,764,197,537,951,919,24,341,334,505,796,619,492,295,380,128,533,600,160,51,249,5,837,905,747,505,82,158,687,507,339,575,206,28,29,91,459,118,284,995,544,3,154,89,840,364,682,700,143,173,216,290,733,525,399,574,693,500,189,590,529,972,378,299,461,866,326,43,711,460,426,947,391,536,26,579,304,852,158,621,683,901,237,22,225,59,52,798,262,754,649,504,861,472,480,570,347,891,956,347,31,784,581,668,127,628,962,698,191,313,714,893}, 101)));
    	System.out.println( Arrays.toString(twoSum( new int[] {0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36, 15762,15764,15766,15768,15770,15772,15774,15776,15778,15780,15782,15784,15786,15788,15790,15792,15794,15796,15798,15800,15802,15804,15806,15808,15810,15812,15814,15816,15818,15820,15822,15824,15826,15828,15830,15832,15834,15836,15838,15840,15842,15844,15846,15848,15850,15852,15854,15856,15858,15860,15862,15864,15866,15868,15870,15872,15874,15876,15878,15880,15882,15884,15886,15888,15890,15892,15894,15896,15898,15900,15902,15904,15906,15908,15910,15912,15914,15916,15918,15920,15922,15924,15926,15928,15930,15932,15934,15936,15938,15940,15942,15944,15946,15948,15950,15952,15954,15956,15958,15960,15962,15964,15966,15968,15970,15972,15974,15976,15978,15980,15982,15984,15986,15988,15990,15992,15994,15996,15998,16000,16002,16004,16006,16008,16010,16012,16014,16016,16018,16020,1,16024,16026,16028,16030,16032,16034,16036,16038,16040,16042,16044,16046,16048,16050,16052,16054,16056,16058,16060,16062,16064,16066,16068,16070,16072,16074,16076,16078,16080,16082,16084,16086,16088,16090,16092,16094,16096,16098,16100,16102,16104,16106,16108,16110,16112,16114,16116,16118,16120,16122,16124,16126,16128,16130,16132,16134,16136,16138,16140,16142,16144,16146,16148,16150,16152,16154,16156,16158,16160,16162,16164,16166,16168,16170,16172,16174,16176,16178,16180,16182,16184,16186,16188,16190,16192,16194,16196,16198,16200,16202,16204,16206,16208,16210,16212,16214,16216,16218,16220,16222,16224,16226,16228,16230,16232,16234,16236,16238,16240,16242,16244,16246,16248,16250,16252,16254,16256,16258,16260,16262,16264,16266,16268,16270,16272,16274,16276,16278,16280,16282,16284,16286,16288,16290,16292,16294,16296,16298,16300,16302,16304,16306,16308,16310,16312,16314,16316,16318,16320,16322,16324,16326,16328,16330,16332,16334,16336,16338,16340,16342,16344,16346,16348,16350,16352,16354,16356,16358,16360,16362,16364,16366,16368,16370,16372,16374,16376,16378,16380,16382,16384,16386,16388,16390,16392,16394,16396,16398,16400,16402,16404,16406,16408,16410,16412,16414,16416,16418,16420,16422,16424,16426,16428}, 16021)));
    }
}
//numMap.forEach((k,v) ->{
//Integer num = k;
//int other = target - num;
//if ((other != num) && (-1 != numMap.getOrDefault(other, -1))) {
//	successPair[0] = numMap.get(num);
//	successPair[1] = numMap.get(other);    			
//}
//if ((other == num) && (-1 != numMap2.getOrDefault(other, -1))) {
//	successPair[0] = numMap.get(num);
//	successPair[1] = numMap2.get(num);    			
//}
//});
